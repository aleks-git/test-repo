
name: CI/CD
on:
  push:
    branches: [main, stage]
  pull_request:
#    types:
#      - closed
    branches: [main, stage]
  workflow_dispatch:  # Allows manual triggering
    inputs:
      type:
        description: 'Workflow type [pull_request, push]'
        required: true
        default: 'pull_request'

env:
  SERVER_USER:  ${{ secrets.SERVER_USER }}
  GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
  KNOWN_HOST:   ${{ secrets.KNOWN_HOST }}
  SERVER_IP:    ${{ github.ref_name == 'main' && secrets.PROD_SERVER_IP || secrets.STAGE_SERVER_IP }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' || github.event.inputs.type == 'pull_request')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: ðŸ”Ž Check IP
        run: curl https://api.ipify.org

      - name: Set up PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          tools: composer:2.6.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install PHP Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --no-scripts

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.9.0'

      - name: Install NPM Dependencies
        run: npm install

      - name: Run NPM scripts
        run: npm run gulp:build:prod

#      - name: Run PHP Tests
#        run: path/to/phpunit

  deploy:
    runs-on: ubuntu-latest
    #needs: build-and-test
    if: (github.event_name == 'push' || github.event.inputs.type == 'push')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

#      - name: Set up PHP and Composer
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: '8.0'
#          tools: composer:2.6.6
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Install PHP Dependencies
#        run: composer install --prefer-dist --no-progress --no-interaction --no-scripts

#      - name: Deploy code
#        uses: appleboy/ssh-action@master
#        with:
#          host: $SERVER_IP
#          username: $SERVER_USER
#          key: ${{ secrets.DEPLOY_TOKEN }}
#          script: |
#            public_html/test-repo/
#            git pull origin main
#            npm install
#            npm run gulp:build:prod

#      - name: Deploy
#        # env:
#        #   DEPLOY_KEY: ${{ secrets.DEPLOY_TOKEN }}
#        run: |
#          ssh $GITHUB_TOKEN $SERVER_USER@$SERVER_IP "
#            cd public_html/test-repo/ &&
#           git pull origin main"
#           && composer install --no-dev --no-interaction &&
#            npm ci &&
#            npm run gulp:build:prod"


      - name: Set up SSH
        run: |
          # mkdir -p ~/.ssh
          # echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          # chmod 600 ~/.ssh/id_rsa
          # # To skip SSH host verification (unsafe for production, consider validating the fingerprint)
          # touch ~/.ssh/known_hosts
          # ssh-keyscan -H $SSH_KNOWN_HOSTS >> ~/.ssh/known_hosts

          mkdir -p ~/.ssh/
          echo "$GITHUB_TOKEN" > ~/.ssh/private.key
          sudo chmod 700 ~/.ssh/private.key
          echo "$KNOWN_HOST" > ~/.ssh/known_hosts
        # shell: bash
        # env:
        #   SSH_PRIVATE_KEY: ${{secrets.DEPLOY_TOKEN}}
        #   SSH_KNOWN_HOSTS: ${{secrets.KNOWN_HOSTS}}
        #   SSH_KEY_PATH: ${{ github.workspace }}/../private.key

      - name: Deploy to Server
        run: |
          echo "Starting Deployment"
          # more ~/.ssh/private.key
          # more ~/.ssh/known_hosts
          # more gulpfile.js
          # ssh -i ~/.ssh/private.key $SERVER_USER@$SERVER_IP /bin/bash
          ssh -i ~/.ssh/private.key -tt $SERVER_USER@$SERVER_IP


#
#      - name: Deploy
#        env:
#          DEPLOY_KEY: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
#            cd $PRODUCTION_DEPLOY_PATH &&
#            git pull origin master &&
#            composer install --no-dev --no-interaction &&
#            npm ci &&
#            npm run gulp:build:prod &&
#            php ./scripts/commands config:decrypt"
#
#      - name: Tag Production Release
#        if: success()
#        run: |
#          PROD_TAG="prod-$(date +'%Y%m%d%H%M%S')"
#          git tag $PROD_TAG
#          git push origin $PROD_TAG

#  notification:
#    name: Notify
#    runs-on: ubuntu-latest
#    needs: [deploy]
#    if: always()
#    steps:
#      - uses: martialonline/workflow-status@v3
#        id: check
#      - uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ steps.check.outputs.status }}
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
